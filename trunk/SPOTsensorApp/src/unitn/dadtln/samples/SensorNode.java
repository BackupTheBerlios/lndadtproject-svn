/*
 * Copyright (c) 2007 Sun Microsystems, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

package unitn.dadtln.samples;


import polimi.ln.runtime.LNDeliver;

import unitn.dadt.internals.Action;
import unitn.dadt.internals.CompleteView;


import com.sun.spot.sensorboard.EDemoBoard;
import com.sun.spot.sensorboard.peripheral.ITriColorLED;

import java.util.Enumeration;
import java.util.Vector;

import javax.microedition.midlet.MIDlet;
import javax.microedition.midlet.MIDletStateChangeException;

/*
import polimi.ln.nodeAttributes.Node;
import polimi.ln.nodeAttributes.SetAttribute;

import polimi.ln.runtime.LNDeliver;
import polimi.ln.runtime.LogicalNeighborhoods;
import polimi.ln.runtime.messages.ReplyMsg;
*/


import unitn.dadt.LNSupport.LNCompleteView;
import unitn.dadt.LNSupport.NodeMgr;
import unitn.dadt.LNSupport.LNSupportRequestMsg;
import unitn.dadt.internals.DataView;

public class SensorNode extends MIDlet implements LNDeliver {
    
	ITriColorLED[] leds = EDemoBoard.getInstance().getLEDs();
	  
    public Vector ADTinstances = new Vector(); // collection of ADT instances belonging to the sensor node
    private NodeMgr ADTmgr = new NodeMgr(this); // ADT manager that coordinates sensors' readings of ADT instances  
    
    public void init(){
  
    	// create ADT instances and bind them to DADT type
        ADTinstances.addElement(new Sensor(Sensor.TEMP, 1.0));
        ADTinstances.addElement(new Sensor(Sensor.LIGHT, 2.0));
    
        for (Enumeration e = ADTinstances.elements(); e.hasMoreElements();)
	    	ADTmgr.bind((Sensor)e.nextElement(), "unitn.dadtln.samples.DSensor");
    }
    



    public void deliver(Object msg) {
		if (msg instanceof LNSupportRequestMsg) 
		{
			Action action = getReqAction((LNSupportRequestMsg) msg);
			CompleteView view = getReqView((LNSupportRequestMsg)msg); 
			
			ADTmgr.processRequestMsg(msg, action, view); // process request message 
			leds[7].setOff();
		} 
	}

	
	protected void destroyApp(boolean arg0) throws MIDletStateChangeException {
		// TODO Auto-generated method stub
		
	}

	protected void pauseApp() {
		// TODO Auto-generated method stub
		
	}


	protected void startApp() throws MIDletStateChangeException {
		init();
	}
	
	private Action getReqAction(LNSupportRequestMsg msg){
		// this method can't be hided in NodeMgr, because it is application specific (to be generated by JADT preprocessor)
		String actionName = msg.getAction();
		if (actionName == "DSensor_read_Action")
		{	
			return new DSensor_read_Action();
		}		
		else if (actionName == "DSensor_reset_Action"){
			return new DSensor_reset_Action();
		}
		return null;
	} 
	
	private CompleteView getReqView(LNSupportRequestMsg msg){
		
		
		return null;
	}


	/**
	 * Specifies attributes of the ADT instances (over LN)
	 */
	public Vector setLNAttributes() {
		return null;
		/*
		Vector attributes = new Vector(); // attributes of the sensor node (and its instances) to be used by LN layer
	
		Object[] onBoardSensors = new Object[ADTinstances.size()];
	
		int idx = 0;
		for (Object s : ADTinstances) 
		{
	    	((Sensor)s).collectAttributesForLN(attributes);	// collects all attributes among all ADT instances of SensorNode
		
	    	onBoardSensors[idx] = Sensor.typeToStr(((Sensor)s).type);
			idx ++;
		}
		
		attributes.add(new SetAttribute("OnBoardSensors", onBoardSensors));
    	
		return attributes;
		*/
	}

	public void deliver(byte[] data) {
		// TODO Auto-generated method stub
		
	}
	
}
